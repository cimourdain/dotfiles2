#!/bin/bash

function update_connexion_dns_config {
    local connection_name="${1}"
    local expected_dns="${2}"

    local expected_dns_arr=$(echo $expected_dns | tr " " "\n")
    local reboot_required="0"

    local reboot_required="0"
    echo >&2 "👓 Update DNS Settings if required for connection ${connection_name} to use DNS ${expected_dns}"
    while read -r connection_settings_line
    do
        key=$(echo "$connection_settings_line" | cut -d':' -f1)
        value=$(echo "$connection_settings_line" | cut -d':' -f2)

        if [[ "${key}" == "ipv6.ignore-auto-dns" && ${value} != "yes" ]];then
            echo -e >&2 "\t 👷 Update ipv6.ignore-auto-dns settings because current value is ${value} and we expect yes"
            nmcli con mod "${connection_name}" ipv6.ignore-auto-dns yes
            reboot_required="1"
        fi

        if [[ "${key}" == "ipv4.ignore-auto-dns" && ${value} != "yes" ]];then
            echo -e >&2 "\t 👷 Update ipv4.ignore-auto-dns settings because current value is ${value} and we expect yes"
            nmcli con mod "${connection_name}" ipv4.ignore-auto-dns yes
            reboot_required=1
        fi

        if [[ "${key}" == "ipv4.dns" ]];then
            current_dns_array=$(echo "$value" | tr "," "\n")

            if [[ "${current_dns_array[@]}" != "${expected_dns_arr[@]}" ]]; then
                echo -e >&2 "\t 👷 Update ipv4.dns settings because current value is ${value} and we expect ${expected_dns[@]}"
                nmcli con mod "${connection_name}" ipv4.dns "${expected_dns[@]}"
                reboot_required="1"
            fi
        fi

<<<<<<< HEAD
    done < <(nmcli -t con show "${connection_name}" | grep -E 'ipv4.dns:|ipv4.ignore-auto-dns:|ipv6.ignore-auto-dns:')

    if [ "${reboot_required}" == "1" ];then
        echo -e >&2 "\t 🚀 Restart connection ${connection_name}"
=======
    done

    if [ "${reboot_required}" == "1" ];then
        echo >&2 "👷 Restart connection ${connection_name}"
>>>>>>> 5c9c553 (fix: bashrc imports)
        nmcli con down "${connection_name}"
        nmcli con up "${connection_name}"
    fi
}

function set_dns {
    declare -A dns_providers_ips=(["cloudflare"]="1.1.1.1 1.0.0.1" ["google"]="8.8.8.8 8.8.4.4" ["quad9"]="9.9.9.9 149.112.112.112" ["openDNS"]="208.67.222.222 208.67.220.220" ["ControlD"]="76.76.2.0 76.76.10.0")
    local dns_provider=${1:-"google"}

    echo >&2 "🏠 Set DNS to use ${dns_provider} (${dns_providers_ips[${dns_provider}]}) for all connections"
    nmcli -g name,type connection  show  --active | awk -F: '/ethernet|wireless/ { print $1 }' | while read connection
    do
        update_connexion_dns_config "${connection}" "${dns_providers_ips[${dns_provider}]}"
    done
}

function reset_dns {

    nmcli -g name,type connection  show  --active | awk -F: '/ethernet|wireless/ { print $1 }' | while read connection
    do
        echo >&2 "Reset DNS for connection ${connection}"
        nmcli con mod "${connection}" ipv4.ignore-auto-dns no
        nmcli con mod "${connection}" ipv6.ignore-auto-dns no
        nmcli con down "${connection}"
        nmcli con up "${connection}"
    done
}