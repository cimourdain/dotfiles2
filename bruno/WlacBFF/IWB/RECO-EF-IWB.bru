meta {
  name: RECO-EF-IWB
  type: http
  seq: 2
}

get {
  url: {{BFF_URL}}/v1/recommendation/estimation_funnel/IWB?estimationId={{estimationId}}&lat=51.2593008591088&lng=4.79091201914399&price={{price}}&propertyType={{propertyType}}&zipCode=6030
  body: none
  auth: none
}

query {
  estimationId: {{estimationId}}
  lat: 51.2593008591088
  lng: 4.79091201914399
  price: {{price}}
  propertyType: {{propertyType}}
  zipCode: 6030
  ~activeLanguage: {{activeLanguage}}
}

script:pre-request {
  // const {faker} = require('@faker-js/faker');
  
  // // const estimationId = faker.datatype.uuid();
  // // bru.setVar('estimationId', estimationId);
  
  // const price = faker.number.int({ min: 0, max: 1000000 });
  // bru.setVar('price', price);
  
  // const propertyType = faker.helpers.arrayElement(['Apartment', 'House'])
  // bru.setVar('propertyType', propertyType);
  
  // const activeLanguage = faker.helpers.arrayElement(['en', 'fr', ''])
  // bru.setVar('activeLanguage', activeLanguage);
}

tests {
  test("should return 200", function() {
    const data = res.getBody();
    expect(res.getStatus()).to.equal(200);
  });
   
  test("should contains a list of 21 agencies", function() {
    const data = res.getBody();
    expect(data).have.property('agencies');
    expect(data.agencies).with.lengthOf(21);
  });
  
  test("should have a topPosition agency as first result", function() {
    const data = res.getBody();
    expect(data).have.property('agencies');
    expect(data.agencies[0].isTopPosition).to.equal(true);
  });
}
