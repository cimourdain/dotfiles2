meta {
  name: RandomBELocation
  type: http
  seq: 1
}

get {
  url: https://www.generatormix.com/random-address-in-belgium?number=1
  body: none
  auth: none
}

query {
  number: 1
}

script:post-response {
  const { parse } = require('node-html-parser');
  
  function getAddressElementFromTag(html, textStarsWith) {
    const addressElementTag = html
      .getElementsByTagName('p')
      .find((tag) => tag.textContent.startsWith(textStarsWith));
      if(addressElementTag == undefined){
        return undefined;
      }
      const addressElementValue = addressElementTag.rawText.split(':')[1].trim();
      return addressElementValue;
  }
  
  const data = res.getBody();
  const html = parse(res.getBody());
  const zipCode = getAddressElementFromTag(html, 'Postcode:');
  if (!zipCode) {
     // abort request.
      bru.setNextRequest(null);
  } else {
    bru.setVar("BEZipCode", encodeURI(zipCode));
  }
}

tests {
  const { parse } = require('node-html-parser');
  
  function getAddressElementFromTag(html, textStarsWith) {
    const addressElementTag = html
      .getElementsByTagName('p')
      .find((tag) => tag.textContent.startsWith(textStarsWith));
      if(addressElementTag == undefined){
        return undefined;
      }
      const addressElementValue = addressElementTag.rawText.split(':')[1].trim();
      return addressElementValue;
  }
  
  const data = res.getBody();
  const html = parse(res.getBody());
  
  test("should return 200", function() {  
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should have a zipCode in response", function() {
    const zipCode = getAddressElementFromTag(html, 'Postcode:');
    expect(zipCode, 'Postcode value in HTML').to.not.be.undefined;
  });
}
