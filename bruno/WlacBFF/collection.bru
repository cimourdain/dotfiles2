script:pre-request {
  const {faker} = require('@faker-js/faker');
  
  
  // faker variables
  const estimationId = faker.datatype.uuid();
  bru.setVar('estimationId', estimationId);
  
  const price = faker.number.int({ min: 0, max: 1000000 });
  bru.setVar('price', price);
  
  const priceMaxVar = faker.number.int({ min: 0, max: 10000 });
  bru.setVar('priceMax', price + priceMaxVar);
  
  const priceMinVar = faker.number.int({ min: 0, max: 10000 });
  bru.setVar('priceMin', price - priceMinVar);
  
  const propertyType = faker.helpers.arrayElement(['Apartment', 'House'])
  bru.setVar('propertyType', propertyType);
  
  const livingSurface = faker.number.int({ min: 0, max: 10000 });
  bru.setVar('livingSurface', livingSurface);
  
  
  
  
  
}

script:post-response {
  const { parse } = require('node-html-parser');
  const {faker} = require('@faker-js/faker');
  
  // common functions
  function getAddressElementFromTag(html, textStarsWith) {
    const addressElementTag = html
      .getElementsByTagName('p')
      .find((tag) => tag.textContent.startsWith(textStarsWith));
      if(addressElementTag == undefined){
        return undefined;
      }
      const addressElementValue = addressElementTag.rawText.split(':')[1].trim();
      return addressElementValue;
  }
  
  function getAddressFromGeneratormixResponse() {
    const data = res.getBody();
    const html = parse(data);
    const address = getAddressElementFromTag(html, 'Street:');
    const city = getAddressElementFromTag(html, 'Town:');
    const zipCode = getAddressElementFromTag(html, 'Postcode:');
    
    return {
      address, city, zipCode
    }
  }
  
  function setVarsFromGeneratormixResponse(){
    const response = getAddressFromGeneratormixResponse();
    if (!response.address || !response.city || !response.zipCode ) {
      bru.setNextRequest(null);
      return
    }
    
    bru.setVar("address", encodeURI(response.address));
    bru.setVar("city", encodeURI(response.city));
    bru.setVar("zipCode", encodeURI(response.zipCode));
    return
  }
}

tests {
  // imports
  const { parse } = require('node-html-parser');
  
  // common vars
  const data = res.getBody();
  
  // common functions
  const testRecoHasAgenciesCount = (count) => {
    const data = res.getBody();
    expect(data).have.property('agencies');
    expect(data.agencies).to.have.lengthOf.above((count - 1), `Less than ${count} agencies in response, it is suspicious`);
  }
  
  function getAddressElementFromTag(html, textStarsWith) {
    const addressElementTag = html
      .getElementsByTagName('p')
      .find((tag) => tag.textContent.startsWith(textStarsWith));
      if(addressElementTag == undefined){
        return undefined;
      }
      const addressElementValue = addressElementTag.rawText.split(':')[1].trim();
      return addressElementValue;
  }
  
  // common tests
  test("should return 200", function() {  
    const data = res.getBody();
    expect(res.getStatus()).to.equal(200);
  });
  
  
  
  
  
  
  
  
}
